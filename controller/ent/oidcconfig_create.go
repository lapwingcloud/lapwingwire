// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lapwingcloud/lapwingwire/controller/ent/oidcconfig"
)

// OIDCConfigCreate is the builder for creating a OIDCConfig entity.
type OIDCConfigCreate struct {
	config
	mutation *OIDCConfigMutation
	hooks    []Hook
}

// SetProviderKey sets the "provider_key" field.
func (occ *OIDCConfigCreate) SetProviderKey(s string) *OIDCConfigCreate {
	occ.mutation.SetProviderKey(s)
	return occ
}

// SetProviderName sets the "provider_name" field.
func (occ *OIDCConfigCreate) SetProviderName(s string) *OIDCConfigCreate {
	occ.mutation.SetProviderName(s)
	return occ
}

// SetDiscoveryURI sets the "discovery_uri" field.
func (occ *OIDCConfigCreate) SetDiscoveryURI(s string) *OIDCConfigCreate {
	occ.mutation.SetDiscoveryURI(s)
	return occ
}

// SetClientID sets the "client_id" field.
func (occ *OIDCConfigCreate) SetClientID(s string) *OIDCConfigCreate {
	occ.mutation.SetClientID(s)
	return occ
}

// SetClientSecret sets the "client_secret" field.
func (occ *OIDCConfigCreate) SetClientSecret(s string) *OIDCConfigCreate {
	occ.mutation.SetClientSecret(s)
	return occ
}

// SetRedirectURI sets the "redirect_uri" field.
func (occ *OIDCConfigCreate) SetRedirectURI(s string) *OIDCConfigCreate {
	occ.mutation.SetRedirectURI(s)
	return occ
}

// Mutation returns the OIDCConfigMutation object of the builder.
func (occ *OIDCConfigCreate) Mutation() *OIDCConfigMutation {
	return occ.mutation
}

// Save creates the OIDCConfig in the database.
func (occ *OIDCConfigCreate) Save(ctx context.Context) (*OIDCConfig, error) {
	return withHooks(ctx, occ.sqlSave, occ.mutation, occ.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (occ *OIDCConfigCreate) SaveX(ctx context.Context) *OIDCConfig {
	v, err := occ.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (occ *OIDCConfigCreate) Exec(ctx context.Context) error {
	_, err := occ.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (occ *OIDCConfigCreate) ExecX(ctx context.Context) {
	if err := occ.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (occ *OIDCConfigCreate) check() error {
	if _, ok := occ.mutation.ProviderKey(); !ok {
		return &ValidationError{Name: "provider_key", err: errors.New(`ent: missing required field "OIDCConfig.provider_key"`)}
	}
	if v, ok := occ.mutation.ProviderKey(); ok {
		if err := oidcconfig.ProviderKeyValidator(v); err != nil {
			return &ValidationError{Name: "provider_key", err: fmt.Errorf(`ent: validator failed for field "OIDCConfig.provider_key": %w`, err)}
		}
	}
	if _, ok := occ.mutation.ProviderName(); !ok {
		return &ValidationError{Name: "provider_name", err: errors.New(`ent: missing required field "OIDCConfig.provider_name"`)}
	}
	if v, ok := occ.mutation.ProviderName(); ok {
		if err := oidcconfig.ProviderNameValidator(v); err != nil {
			return &ValidationError{Name: "provider_name", err: fmt.Errorf(`ent: validator failed for field "OIDCConfig.provider_name": %w`, err)}
		}
	}
	if _, ok := occ.mutation.DiscoveryURI(); !ok {
		return &ValidationError{Name: "discovery_uri", err: errors.New(`ent: missing required field "OIDCConfig.discovery_uri"`)}
	}
	if v, ok := occ.mutation.DiscoveryURI(); ok {
		if err := oidcconfig.DiscoveryURIValidator(v); err != nil {
			return &ValidationError{Name: "discovery_uri", err: fmt.Errorf(`ent: validator failed for field "OIDCConfig.discovery_uri": %w`, err)}
		}
	}
	if _, ok := occ.mutation.ClientID(); !ok {
		return &ValidationError{Name: "client_id", err: errors.New(`ent: missing required field "OIDCConfig.client_id"`)}
	}
	if v, ok := occ.mutation.ClientID(); ok {
		if err := oidcconfig.ClientIDValidator(v); err != nil {
			return &ValidationError{Name: "client_id", err: fmt.Errorf(`ent: validator failed for field "OIDCConfig.client_id": %w`, err)}
		}
	}
	if _, ok := occ.mutation.ClientSecret(); !ok {
		return &ValidationError{Name: "client_secret", err: errors.New(`ent: missing required field "OIDCConfig.client_secret"`)}
	}
	if v, ok := occ.mutation.ClientSecret(); ok {
		if err := oidcconfig.ClientSecretValidator(v); err != nil {
			return &ValidationError{Name: "client_secret", err: fmt.Errorf(`ent: validator failed for field "OIDCConfig.client_secret": %w`, err)}
		}
	}
	if _, ok := occ.mutation.RedirectURI(); !ok {
		return &ValidationError{Name: "redirect_uri", err: errors.New(`ent: missing required field "OIDCConfig.redirect_uri"`)}
	}
	if v, ok := occ.mutation.RedirectURI(); ok {
		if err := oidcconfig.RedirectURIValidator(v); err != nil {
			return &ValidationError{Name: "redirect_uri", err: fmt.Errorf(`ent: validator failed for field "OIDCConfig.redirect_uri": %w`, err)}
		}
	}
	return nil
}

func (occ *OIDCConfigCreate) sqlSave(ctx context.Context) (*OIDCConfig, error) {
	if err := occ.check(); err != nil {
		return nil, err
	}
	_node, _spec := occ.createSpec()
	if err := sqlgraph.CreateNode(ctx, occ.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	occ.mutation.id = &_node.ID
	occ.mutation.done = true
	return _node, nil
}

func (occ *OIDCConfigCreate) createSpec() (*OIDCConfig, *sqlgraph.CreateSpec) {
	var (
		_node = &OIDCConfig{config: occ.config}
		_spec = sqlgraph.NewCreateSpec(oidcconfig.Table, sqlgraph.NewFieldSpec(oidcconfig.FieldID, field.TypeInt))
	)
	if value, ok := occ.mutation.ProviderKey(); ok {
		_spec.SetField(oidcconfig.FieldProviderKey, field.TypeString, value)
		_node.ProviderKey = value
	}
	if value, ok := occ.mutation.ProviderName(); ok {
		_spec.SetField(oidcconfig.FieldProviderName, field.TypeString, value)
		_node.ProviderName = value
	}
	if value, ok := occ.mutation.DiscoveryURI(); ok {
		_spec.SetField(oidcconfig.FieldDiscoveryURI, field.TypeString, value)
		_node.DiscoveryURI = value
	}
	if value, ok := occ.mutation.ClientID(); ok {
		_spec.SetField(oidcconfig.FieldClientID, field.TypeString, value)
		_node.ClientID = value
	}
	if value, ok := occ.mutation.ClientSecret(); ok {
		_spec.SetField(oidcconfig.FieldClientSecret, field.TypeString, value)
		_node.ClientSecret = value
	}
	if value, ok := occ.mutation.RedirectURI(); ok {
		_spec.SetField(oidcconfig.FieldRedirectURI, field.TypeString, value)
		_node.RedirectURI = value
	}
	return _node, _spec
}

// OIDCConfigCreateBulk is the builder for creating many OIDCConfig entities in bulk.
type OIDCConfigCreateBulk struct {
	config
	builders []*OIDCConfigCreate
}

// Save creates the OIDCConfig entities in the database.
func (occb *OIDCConfigCreateBulk) Save(ctx context.Context) ([]*OIDCConfig, error) {
	specs := make([]*sqlgraph.CreateSpec, len(occb.builders))
	nodes := make([]*OIDCConfig, len(occb.builders))
	mutators := make([]Mutator, len(occb.builders))
	for i := range occb.builders {
		func(i int, root context.Context) {
			builder := occb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OIDCConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, occb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, occb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, occb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (occb *OIDCConfigCreateBulk) SaveX(ctx context.Context) []*OIDCConfig {
	v, err := occb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (occb *OIDCConfigCreateBulk) Exec(ctx context.Context) error {
	_, err := occb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (occb *OIDCConfigCreateBulk) ExecX(ctx context.Context) {
	if err := occb.Exec(ctx); err != nil {
		panic(err)
	}
}
