// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lapwingcloud/lapwingwire/controller/ent/oidcconfig"
	"github.com/lapwingcloud/lapwingwire/controller/ent/predicate"
)

// OIDCConfigUpdate is the builder for updating OIDCConfig entities.
type OIDCConfigUpdate struct {
	config
	hooks    []Hook
	mutation *OIDCConfigMutation
}

// Where appends a list predicates to the OIDCConfigUpdate builder.
func (ocu *OIDCConfigUpdate) Where(ps ...predicate.OIDCConfig) *OIDCConfigUpdate {
	ocu.mutation.Where(ps...)
	return ocu
}

// SetProviderKey sets the "provider_key" field.
func (ocu *OIDCConfigUpdate) SetProviderKey(s string) *OIDCConfigUpdate {
	ocu.mutation.SetProviderKey(s)
	return ocu
}

// SetProviderName sets the "provider_name" field.
func (ocu *OIDCConfigUpdate) SetProviderName(s string) *OIDCConfigUpdate {
	ocu.mutation.SetProviderName(s)
	return ocu
}

// SetDiscoveryURI sets the "discovery_uri" field.
func (ocu *OIDCConfigUpdate) SetDiscoveryURI(s string) *OIDCConfigUpdate {
	ocu.mutation.SetDiscoveryURI(s)
	return ocu
}

// SetClientID sets the "client_id" field.
func (ocu *OIDCConfigUpdate) SetClientID(s string) *OIDCConfigUpdate {
	ocu.mutation.SetClientID(s)
	return ocu
}

// SetClientSecret sets the "client_secret" field.
func (ocu *OIDCConfigUpdate) SetClientSecret(s string) *OIDCConfigUpdate {
	ocu.mutation.SetClientSecret(s)
	return ocu
}

// SetRedirectURI sets the "redirect_uri" field.
func (ocu *OIDCConfigUpdate) SetRedirectURI(s string) *OIDCConfigUpdate {
	ocu.mutation.SetRedirectURI(s)
	return ocu
}

// Mutation returns the OIDCConfigMutation object of the builder.
func (ocu *OIDCConfigUpdate) Mutation() *OIDCConfigMutation {
	return ocu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ocu *OIDCConfigUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ocu.sqlSave, ocu.mutation, ocu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ocu *OIDCConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := ocu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ocu *OIDCConfigUpdate) Exec(ctx context.Context) error {
	_, err := ocu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocu *OIDCConfigUpdate) ExecX(ctx context.Context) {
	if err := ocu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ocu *OIDCConfigUpdate) check() error {
	if v, ok := ocu.mutation.ProviderKey(); ok {
		if err := oidcconfig.ProviderKeyValidator(v); err != nil {
			return &ValidationError{Name: "provider_key", err: fmt.Errorf(`ent: validator failed for field "OIDCConfig.provider_key": %w`, err)}
		}
	}
	if v, ok := ocu.mutation.ProviderName(); ok {
		if err := oidcconfig.ProviderNameValidator(v); err != nil {
			return &ValidationError{Name: "provider_name", err: fmt.Errorf(`ent: validator failed for field "OIDCConfig.provider_name": %w`, err)}
		}
	}
	if v, ok := ocu.mutation.DiscoveryURI(); ok {
		if err := oidcconfig.DiscoveryURIValidator(v); err != nil {
			return &ValidationError{Name: "discovery_uri", err: fmt.Errorf(`ent: validator failed for field "OIDCConfig.discovery_uri": %w`, err)}
		}
	}
	if v, ok := ocu.mutation.ClientID(); ok {
		if err := oidcconfig.ClientIDValidator(v); err != nil {
			return &ValidationError{Name: "client_id", err: fmt.Errorf(`ent: validator failed for field "OIDCConfig.client_id": %w`, err)}
		}
	}
	if v, ok := ocu.mutation.ClientSecret(); ok {
		if err := oidcconfig.ClientSecretValidator(v); err != nil {
			return &ValidationError{Name: "client_secret", err: fmt.Errorf(`ent: validator failed for field "OIDCConfig.client_secret": %w`, err)}
		}
	}
	if v, ok := ocu.mutation.RedirectURI(); ok {
		if err := oidcconfig.RedirectURIValidator(v); err != nil {
			return &ValidationError{Name: "redirect_uri", err: fmt.Errorf(`ent: validator failed for field "OIDCConfig.redirect_uri": %w`, err)}
		}
	}
	return nil
}

func (ocu *OIDCConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ocu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(oidcconfig.Table, oidcconfig.Columns, sqlgraph.NewFieldSpec(oidcconfig.FieldID, field.TypeInt))
	if ps := ocu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ocu.mutation.ProviderKey(); ok {
		_spec.SetField(oidcconfig.FieldProviderKey, field.TypeString, value)
	}
	if value, ok := ocu.mutation.ProviderName(); ok {
		_spec.SetField(oidcconfig.FieldProviderName, field.TypeString, value)
	}
	if value, ok := ocu.mutation.DiscoveryURI(); ok {
		_spec.SetField(oidcconfig.FieldDiscoveryURI, field.TypeString, value)
	}
	if value, ok := ocu.mutation.ClientID(); ok {
		_spec.SetField(oidcconfig.FieldClientID, field.TypeString, value)
	}
	if value, ok := ocu.mutation.ClientSecret(); ok {
		_spec.SetField(oidcconfig.FieldClientSecret, field.TypeString, value)
	}
	if value, ok := ocu.mutation.RedirectURI(); ok {
		_spec.SetField(oidcconfig.FieldRedirectURI, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ocu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oidcconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ocu.mutation.done = true
	return n, nil
}

// OIDCConfigUpdateOne is the builder for updating a single OIDCConfig entity.
type OIDCConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OIDCConfigMutation
}

// SetProviderKey sets the "provider_key" field.
func (ocuo *OIDCConfigUpdateOne) SetProviderKey(s string) *OIDCConfigUpdateOne {
	ocuo.mutation.SetProviderKey(s)
	return ocuo
}

// SetProviderName sets the "provider_name" field.
func (ocuo *OIDCConfigUpdateOne) SetProviderName(s string) *OIDCConfigUpdateOne {
	ocuo.mutation.SetProviderName(s)
	return ocuo
}

// SetDiscoveryURI sets the "discovery_uri" field.
func (ocuo *OIDCConfigUpdateOne) SetDiscoveryURI(s string) *OIDCConfigUpdateOne {
	ocuo.mutation.SetDiscoveryURI(s)
	return ocuo
}

// SetClientID sets the "client_id" field.
func (ocuo *OIDCConfigUpdateOne) SetClientID(s string) *OIDCConfigUpdateOne {
	ocuo.mutation.SetClientID(s)
	return ocuo
}

// SetClientSecret sets the "client_secret" field.
func (ocuo *OIDCConfigUpdateOne) SetClientSecret(s string) *OIDCConfigUpdateOne {
	ocuo.mutation.SetClientSecret(s)
	return ocuo
}

// SetRedirectURI sets the "redirect_uri" field.
func (ocuo *OIDCConfigUpdateOne) SetRedirectURI(s string) *OIDCConfigUpdateOne {
	ocuo.mutation.SetRedirectURI(s)
	return ocuo
}

// Mutation returns the OIDCConfigMutation object of the builder.
func (ocuo *OIDCConfigUpdateOne) Mutation() *OIDCConfigMutation {
	return ocuo.mutation
}

// Where appends a list predicates to the OIDCConfigUpdate builder.
func (ocuo *OIDCConfigUpdateOne) Where(ps ...predicate.OIDCConfig) *OIDCConfigUpdateOne {
	ocuo.mutation.Where(ps...)
	return ocuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ocuo *OIDCConfigUpdateOne) Select(field string, fields ...string) *OIDCConfigUpdateOne {
	ocuo.fields = append([]string{field}, fields...)
	return ocuo
}

// Save executes the query and returns the updated OIDCConfig entity.
func (ocuo *OIDCConfigUpdateOne) Save(ctx context.Context) (*OIDCConfig, error) {
	return withHooks(ctx, ocuo.sqlSave, ocuo.mutation, ocuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ocuo *OIDCConfigUpdateOne) SaveX(ctx context.Context) *OIDCConfig {
	node, err := ocuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ocuo *OIDCConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := ocuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocuo *OIDCConfigUpdateOne) ExecX(ctx context.Context) {
	if err := ocuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ocuo *OIDCConfigUpdateOne) check() error {
	if v, ok := ocuo.mutation.ProviderKey(); ok {
		if err := oidcconfig.ProviderKeyValidator(v); err != nil {
			return &ValidationError{Name: "provider_key", err: fmt.Errorf(`ent: validator failed for field "OIDCConfig.provider_key": %w`, err)}
		}
	}
	if v, ok := ocuo.mutation.ProviderName(); ok {
		if err := oidcconfig.ProviderNameValidator(v); err != nil {
			return &ValidationError{Name: "provider_name", err: fmt.Errorf(`ent: validator failed for field "OIDCConfig.provider_name": %w`, err)}
		}
	}
	if v, ok := ocuo.mutation.DiscoveryURI(); ok {
		if err := oidcconfig.DiscoveryURIValidator(v); err != nil {
			return &ValidationError{Name: "discovery_uri", err: fmt.Errorf(`ent: validator failed for field "OIDCConfig.discovery_uri": %w`, err)}
		}
	}
	if v, ok := ocuo.mutation.ClientID(); ok {
		if err := oidcconfig.ClientIDValidator(v); err != nil {
			return &ValidationError{Name: "client_id", err: fmt.Errorf(`ent: validator failed for field "OIDCConfig.client_id": %w`, err)}
		}
	}
	if v, ok := ocuo.mutation.ClientSecret(); ok {
		if err := oidcconfig.ClientSecretValidator(v); err != nil {
			return &ValidationError{Name: "client_secret", err: fmt.Errorf(`ent: validator failed for field "OIDCConfig.client_secret": %w`, err)}
		}
	}
	if v, ok := ocuo.mutation.RedirectURI(); ok {
		if err := oidcconfig.RedirectURIValidator(v); err != nil {
			return &ValidationError{Name: "redirect_uri", err: fmt.Errorf(`ent: validator failed for field "OIDCConfig.redirect_uri": %w`, err)}
		}
	}
	return nil
}

func (ocuo *OIDCConfigUpdateOne) sqlSave(ctx context.Context) (_node *OIDCConfig, err error) {
	if err := ocuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(oidcconfig.Table, oidcconfig.Columns, sqlgraph.NewFieldSpec(oidcconfig.FieldID, field.TypeInt))
	id, ok := ocuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OIDCConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ocuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oidcconfig.FieldID)
		for _, f := range fields {
			if !oidcconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != oidcconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ocuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ocuo.mutation.ProviderKey(); ok {
		_spec.SetField(oidcconfig.FieldProviderKey, field.TypeString, value)
	}
	if value, ok := ocuo.mutation.ProviderName(); ok {
		_spec.SetField(oidcconfig.FieldProviderName, field.TypeString, value)
	}
	if value, ok := ocuo.mutation.DiscoveryURI(); ok {
		_spec.SetField(oidcconfig.FieldDiscoveryURI, field.TypeString, value)
	}
	if value, ok := ocuo.mutation.ClientID(); ok {
		_spec.SetField(oidcconfig.FieldClientID, field.TypeString, value)
	}
	if value, ok := ocuo.mutation.ClientSecret(); ok {
		_spec.SetField(oidcconfig.FieldClientSecret, field.TypeString, value)
	}
	if value, ok := ocuo.mutation.RedirectURI(); ok {
		_spec.SetField(oidcconfig.FieldRedirectURI, field.TypeString, value)
	}
	_node = &OIDCConfig{config: ocuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ocuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oidcconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ocuo.mutation.done = true
	return _node, nil
}
